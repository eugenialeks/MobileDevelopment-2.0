Сборка контекста проекта...
Дата: Thu Oct 30 15:30:45 RTZ 2025
========================================

## Структура проекта

.
./.gitignore
./.gradle
./.idea
./app
./app/.gitignore
./app/build
./app/build.gradle.kts
./app/google-services.json
./app/proguard-rules.pro
./app/src
./app/src/androidTest
./app/src/main
./app/src/test
./build
./build.gradle.kts
./collect_context.sh
./data
./data/.gitignore
./data/build
./data/build.gradle.kts
./data/consumer-rules.pro
./data/proguard-rules.pro
./data/src
./data/src/androidTest
./data/src/main
./data/src/test
./domain
./domain/.gitignore
./domain/build
./domain/build.gradle.kts
./domain/src
./domain/src/main
./gradle
./gradle/libs.versions.toml
./gradle/wrapper
./gradle/wrapper/gradle-wrapper.jar
./gradle/wrapper/gradle-wrapper.properties
./gradle.properties
./gradlew
./gradlew.bat
./local.properties
./project_context.txt
./settings.gradle.kts


## build.gradle / build.gradle.kts

### ./app/build.gradle.kts
```gradle
plugins {
    alias(libs.plugins.android.application)
    id("com.google.gms.google-services")
}

android {
    namespace = "ru.mirea.golysheva.skincare"
    compileSdk = 36

    defaultConfig {
        applicationId = "ru.mirea.golysheva.skincare"
        minSdk = 33
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
}

dependencies {
    implementation(libs.appcompat)
    implementation(libs.activity)
    implementation(libs.constraintlayout)
    testImplementation(libs.junit)
    androidTestImplementation(libs.ext.junit)
    androidTestImplementation(libs.espresso.core)
    implementation ("androidx.recyclerview:recyclerview:1.3.2")
    implementation(project(":domain"))
    implementation(project(":data"))
    implementation(platform("com.google.firebase:firebase-bom:33.5.1"))
    implementation("com.google.firebase:firebase-analytics")
    implementation("com.google.firebase:firebase-auth")
    implementation ("com.squareup.retrofit2:retrofit:2.11.0")
    implementation ("com.squareup.retrofit2:converter-gson:2.11.0")
    implementation ("com.squareup.okhttp3:logging-interceptor:4.12.0")
    implementation("com.squareup.okhttp3:okhttp:4.12.0")
    implementation ("com.google.android.material:material:1.12.0")
    implementation("io.coil-kt:coil:2.6.0")

    implementation ("com.github.bumptech.glide:glide:4.16.0")
}
```

### ./build.gradle.kts
```gradle
// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.android.library) apply false
    id("com.google.gms.google-services") version "4.4.2" apply false
}
```

### ./data/build.gradle.kts
```gradle
plugins {
    alias(libs.plugins.android.library)
}

android {
    namespace = "ru.mirea.golysheva.data"
    compileSdk = 36

    defaultConfig {
        minSdk = 33
        consumerProguardFiles("consumer-rules.pro")
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
}

dependencies {
    implementation(project(":domain"))
    implementation ("com.squareup.retrofit2:retrofit:2.11.0")
    implementation ("com.squareup.retrofit2:converter-gson:2.11.0")
    implementation ("com.squareup.okhttp3:logging-interceptor:4.12.0")
    implementation("androidx.annotation:annotation:1.8.1")
    implementation(libs.firebase.auth)
    implementation("com.google.android.material:material:1.12.0")
    val roomVersion = "2.6.1"
    api("androidx.room:room-runtime:$roomVersion")
    annotationProcessor("androidx.room:room-compiler:$roomVersion")
    testImplementation(libs.junit)

    implementation ("com.squareup.retrofit2:retrofit:2.11.0")
    implementation ("com.squareup.retrofit2:converter-gson:2.11.0")
    implementation ("com.squareup.okhttp3:logging-interceptor:4.12.0")
}

```

### ./domain/build.gradle.kts
```gradle
plugins {
    id("java-library")
}
java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

dependencies {
    implementation("com.google.code.gson:gson:2.10.1")
}
```

## Kotlin файлы

## Java файлы

### ./app/src/androidTest/java/ru/mirea/golysheva/skincare/ExampleInstrumentedTest.java
```java
package ru.mirea.golysheva.skincare;

import android.content.Context;

import androidx.test.platform.app.InstrumentationRegistry;
import androidx.test.ext.junit.runners.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;

/**
 * Instrumented test, which will execute on an Android device.
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
@RunWith(AndroidJUnit4.class)
public class ExampleInstrumentedTest {
    @Test
    public void useAppContext() {
        // Context of the app under test.
        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();
        assertEquals("ru.mirea.golysheva.skincare", appContext.getPackageName());
    }
}
```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/catalog/CatalogViewModel.java
```java
package ru.mirea.golysheva.skincare.presentation.catalog;

import android.util.Log;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.ViewModel;

import java.util.List;

import ru.mirea.golysheva.domain.models.Product;
import ru.mirea.golysheva.domain.repository.ProductRepository;
import ru.mirea.golysheva.domain.usecases.products.GetProductList;

public class CatalogViewModel extends ViewModel {

    private static final String TAG = "CatalogViewModel";
    private final ProductRepository productRepository;

    private final MutableLiveData<List<Product>> _products = new MutableLiveData<>();
    public final LiveData<List<Product>> products = _products;

    private final MutableLiveData<Boolean> _isLoading = new MutableLiveData<>(false);
    public final LiveData<Boolean> isLoading = _isLoading;

    private final MutableLiveData<String> _error = new MutableLiveData<>();
    public final LiveData<String> error = _error;

    public CatalogViewModel(ProductRepository productRepository) {
        this.productRepository = productRepository;
        Log.d(TAG, "CatalogViewModel created");
    }

    @Override
    protected void onCleared() {
        super.onCleared();
        Log.d(TAG, "CatalogViewModel destroyed");
    }

    public void loadProducts(String categoryId) {
        Log.d(TAG, "Loading products, category: " + (categoryId != null ? categoryId : "all"));
        _isLoading.setValue(true);
        _error.setValue(null);

        new Thread(() -> {
            try {
                Log.d(TAG, "Starting data loading in background thread");
                List<Product> productList; // Объявляем переменную здесь

                if (categoryId != null && !categoryId.isEmpty()) {
                    productList = productRepository.getProductList(categoryId);
                    Log.d(TAG, "Loaded category products: " + productList.size());
                } else {
                    productList = new GetProductList(productRepository).execute();
                    Log.d(TAG, "Loaded all products: " + productList.size());
                }

                _products.postValue(productList);
                Log.d(TAG, "LiveData updated with " + productList.size() + " products");
            } catch (Exception e) {
                Log.e(TAG, "Error loading products: " + e.getMessage(), e);
                _error.postValue("Loading error: " + e.getMessage());
            } finally {
                _isLoading.postValue(false);
                Log.d(TAG, "Loading completed");
            }
        }).start();
    }

    public String getDebugInfo() {
        int productCount = _products.getValue() != null ? _products.getValue().size() : 0;
        String debugInfo = "CatalogViewModel Debug - Products: " + productCount +
                ", Loading: " + _isLoading.getValue() +
                ", Error: " + (_error.getValue() != null);
        Log.d(TAG, "Debug: " + debugInfo);
        return debugInfo;
    }
}
```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/catalog/CatalogVmFactory.java
```java
package ru.mirea.golysheva.skincare.presentation.catalog;

import android.content.Context;

import androidx.annotation.NonNull;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;

import ru.mirea.golysheva.data.repository.ProductRepositoryImpl;
import ru.mirea.golysheva.data.storage.favorite.AppDatabase;
import ru.mirea.golysheva.data.storage.network.RetrofitNetworkApi;
import ru.mirea.golysheva.domain.repository.ProductRepository;

public class CatalogVmFactory implements ViewModelProvider.Factory {

    private final Context context;

    public CatalogVmFactory(Context context) {
        this.context = context;
    }

    @NonNull
    @Override
    @SuppressWarnings("unchecked")
    public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {
        if (modelClass.isAssignableFrom(CatalogViewModel.class)) {
            ProductRepository productRepo = new ProductRepositoryImpl(
                    AppDatabase.getInstance(context),
                    new RetrofitNetworkApi()
            );
            return (T) new CatalogViewModel(productRepo);
        }
        throw new IllegalArgumentException("Unknown ViewModel class");
    }
}
```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/CatalogFragment.java
```java
package ru.mirea.golysheva.skincare.presentation;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import ru.mirea.golysheva.skincare.R;
import ru.mirea.golysheva.skincare.presentation.catalog.CatalogViewModel;
import ru.mirea.golysheva.skincare.presentation.catalog.CatalogVmFactory;

public class CatalogFragment extends Fragment {

    private static final String TAG = "CatalogFragment";
    private static final String ARG_CAT = "arg_category_id";
    private CatalogViewModel viewModel;
    private ProductAdapter adapter;

    public static CatalogFragment newInstance(@Nullable String categoryId) {
        CatalogFragment f = new CatalogFragment();
        Bundle b = new Bundle();
        b.putString(ARG_CAT, categoryId);
        f.setArguments(b);
        return f;
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater i, @Nullable ViewGroup c, @Nullable Bundle b) {
        Log.d(TAG, "onCreateView вызван");
        return i.inflate(R.layout.fragment_catalog, c, false);
    }

    @Override
    public void onViewCreated(@NonNull View v, @Nullable Bundle b) {
        super.onViewCreated(v, b);
        Log.d(TAG, "onViewCreated вызван");

        RecyclerView rv = v.findViewById(R.id.rv);
        rv.setLayoutManager(new GridLayoutManager(getContext(), 2));

        Log.d(TAG, "Создание CatalogViewModel");
        viewModel = new ViewModelProvider(this, new CatalogVmFactory(requireContext())).get(CatalogViewModel.class);

        Log.d(TAG, "Тестирование ViewModel: " + viewModel.getDebugInfo());

        viewModel.products.observe(getViewLifecycleOwner(), products -> {
            Log.d(TAG, "LiveData обновлена! Количество продуктов: " + products.size());

            if (adapter == null) {
                Log.d(TAG, "Создание ProductAdapter");
                adapter = new ProductAdapter(p -> {
                    Log.d(TAG, "Продукт нажат: " + p.getName());
                    // Изменено: передаем URL изображения
                    startActivity(ProductDetailsActivity.intent(requireContext(), p.getId(), p.getImageUrl()));
                });
                rv.setAdapter(adapter);
            }
            adapter.submit(products);
            Log.d(TAG, "UI обновлен с " + products.size() + " продуктами");
        });

        viewModel.isLoading.observe(getViewLifecycleOwner(), isLoading -> {
            Log.d(TAG, "Состояние загрузки: " + isLoading);
        });

        viewModel.error.observe(getViewLifecycleOwner(), error -> {
            if (error != null) {
                Log.e(TAG, "Наблюдаемая ошибка: " + error);
            }
        });

        v.findViewById(R.id.btnSearch).setOnClickListener(view -> {
            Log.d(TAG, "Кнопка поиска нажата");
            startActivity(new Intent(requireContext(), SearchActivity.class));
        });

        String categoryId = getArguments() != null ? getArguments().getString(ARG_CAT) : null;
        Log.d(TAG, "Загрузка продуктов для категории: " + (categoryId != null ? categoryId : "все"));
        viewModel.loadProducts(categoryId);
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        Log.d(TAG, "onDestroyView вызван");
    }
}
```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/CategoryAdapter.java
```java
package ru.mirea.golysheva.skincare.presentation;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;
import java.util.List;
import ru.mirea.golysheva.skincare.R;

class CategoryAdapter extends RecyclerView.Adapter<CategoryAdapter.Holder> {

    interface OnClick { void onCategory(HomeFragment.Category c); }

    private final List<HomeFragment.Category> items;
    private final OnClick onClick;

    CategoryAdapter(List<HomeFragment.Category> items, OnClick onClick){
        this.items = items; this.onClick = onClick;
    }

    static class Holder extends RecyclerView.ViewHolder {
        ImageView icon; TextView title;
        Holder(@NonNull View v){ super(v); icon=v.findViewById(R.id.icon); title=v.findViewById(R.id.title); }
    }

    @NonNull @Override public Holder onCreateViewHolder(@NonNull ViewGroup p, int t) {
        return new Holder(LayoutInflater.from(p.getContext()).inflate(R.layout.item_category, p, false));
    }

    @Override public void onBindViewHolder(@NonNull Holder h, int i) {
        HomeFragment.Category c = items.get(i);
        h.icon.setImageResource(c.icon);
        h.title.setText(c.title);
        h.itemView.setOnClickListener(v -> onClick.onCategory(c));
    }

    @Override public int getItemCount() { return items.size(); }
}

```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/details/ProductDetailsViewModel.java
```java
package ru.mirea.golysheva.skincare.presentation.details;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.ViewModel;
import android.util.Log;

import ru.mirea.golysheva.data.repository.FavoritesRepository;
import ru.mirea.golysheva.domain.models.Product;
import ru.mirea.golysheva.domain.repository.ProductRepository;
import ru.mirea.golysheva.domain.usecases.products.GetProductById;

public class ProductDetailsViewModel extends ViewModel {

    private static final String TAG = "ProductDetailsViewModel";
    private final ProductRepository productRepository;
    private final FavoritesRepository favoritesRepository;

    private final MutableLiveData<Product> _product = new MutableLiveData<>();
    public final LiveData<Product> product = _product;

    private final MutableLiveData<Boolean> _isFavorite = new MutableLiveData<>(false);
    public final LiveData<Boolean> isFavorite = _isFavorite;

    private final MutableLiveData<Boolean> _isLoading = new MutableLiveData<>(false);
    public final LiveData<Boolean> isLoading = _isLoading;

    private final MutableLiveData<String> _error = new MutableLiveData<>();
    public final LiveData<String> error = _error;

    public ProductDetailsViewModel(ProductRepository productRepository, FavoritesRepository favoritesRepository) {
        this.productRepository = productRepository;
        this.favoritesRepository = favoritesRepository;
        Log.d(TAG, "ProductDetailsViewModel создан");
    }

    @Override
    protected void onCleared() {
        super.onCleared();
        Log.d(TAG, "ProductDetailsViewModel уничтожен");
    }

    public void loadProduct(String productId) {
        Log.d(TAG, "Загрузка продукта по ID: " + productId);
        _isLoading.setValue(true);
        _error.setValue(null);

        new Thread(() -> {
            try {
                Log.d(TAG, "Загрузка деталей продукта из репозитория");
                Product product = new GetProductById(productRepository).execute(productId);

                if (product != null) {
                    Log.d(TAG, "Продукт загружен: " + product.getName());
                    _product.postValue(product);

                    boolean favorite = favoritesRepository.contains(productId);
                    Log.d(TAG, "Статус избранного: " + favorite);
                    _isFavorite.postValue(favorite);
                } else {
                    Log.w(TAG, "Продукт не найден: " + productId);
                    _error.postValue("Продукт не найден");
                }
            } catch (Exception e) {
                Log.e(TAG, "Ошибка загрузки продукта: " + e.getMessage(), e);
                _error.postValue("Ошибка загрузки продукта: " + e.getMessage());
            } finally {
                _isLoading.postValue(false);
                Log.d(TAG, "Загрузка продукта завершена");
            }
        }).start();
    }

    public void toggleFavorite(String productId) {
        Log.d(TAG, "Переключение избранного для продукта: " + productId);
        boolean newFavoriteState = favoritesRepository.toggle(productId);
        Log.d(TAG, "Избранное переключено на: " + newFavoriteState);
        _isFavorite.setValue(newFavoriteState);
    }

    public String getDebugInfo() {
        Product currentProduct = _product.getValue();
        String debugInfo = "ProductDetailsViewModel Debug - Продукт: " +
                (currentProduct != null ? currentProduct.getName() : "null") +
                ", Избранное: " + _isFavorite.getValue() +
                ", Загрузка: " + _isLoading.getValue() +
                ", Ошибка: " + (_error.getValue() != null);
        Log.d(TAG, "Отладка: " + debugInfo);
        return debugInfo;
    }
}
```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/details/ProductDetailsVmFactory.java
```java
package ru.mirea.golysheva.skincare.presentation.details;

import android.content.Context;

import androidx.annotation.NonNull;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;

import ru.mirea.golysheva.data.repository.FavoritesRepository;
import ru.mirea.golysheva.data.repository.ProductRepositoryImpl;
import ru.mirea.golysheva.data.storage.favorite.AppDatabase;
import ru.mirea.golysheva.data.storage.network.RetrofitNetworkApi;
import ru.mirea.golysheva.domain.repository.ProductRepository;

public class ProductDetailsVmFactory implements ViewModelProvider.Factory {

    private final Context context;

    public ProductDetailsVmFactory(Context context) {
        this.context = context;
    }

    @NonNull
    @Override
    @SuppressWarnings("unchecked")
    public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {
        if (modelClass.isAssignableFrom(ProductDetailsViewModel.class)) {
            ProductRepository productRepo = new ProductRepositoryImpl(
                    AppDatabase.getInstance(context),
                    new RetrofitNetworkApi()
            );
            FavoritesRepository favoritesRepo = new FavoritesRepository(context);
            return (T) new ProductDetailsViewModel(productRepo, favoritesRepo);
        }
        throw new IllegalArgumentException("Unknown ViewModel class");
    }
}
```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/favorites/FavoritesViewModel.java
```java
package ru.mirea.golysheva.skincare.presentation.favorites;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MediatorLiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.ViewModel;
import android.util.Log;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import ru.mirea.golysheva.data.repository.FavoritesRepository;
import ru.mirea.golysheva.domain.models.Product;
import ru.mirea.golysheva.domain.repository.ProductRepository;
import ru.mirea.golysheva.domain.usecases.products.GetProductList;

public class FavoritesViewModel extends ViewModel {

    private static final String TAG = "FavoritesViewModel";
    private final ProductRepository productRepository;
    private final FavoritesRepository favoritesRepository;

    private final MutableLiveData<List<Product>> _allProducts = new MutableLiveData<>();
    private final MutableLiveData<Set<String>> _favoriteIds = new MutableLiveData<>();

    private final MediatorLiveData<List<Product>> _favoriteProducts = new MediatorLiveData<>();
    public final LiveData<List<Product>> favoriteProducts = _favoriteProducts;

    private final MutableLiveData<Boolean> _isLoading = new MutableLiveData<>(false);
    public final LiveData<Boolean> isLoading = _isLoading;

    public FavoritesViewModel(ProductRepository productRepository, FavoritesRepository favoritesRepository) {
        this.productRepository = productRepository;
        this.favoritesRepository = favoritesRepository;
        Log.d(TAG, "FavoritesViewModel создан");

        _favoriteProducts.addSource(_allProducts, products -> {
            Log.d(TAG, "MediatorLiveData: _allProducts изменился, количество: " +
                    (products != null ? products.size() : 0));
            combineFavorites();
        });

        _favoriteProducts.addSource(_favoriteIds, ids -> {
            Log.d(TAG, "MediatorLiveData: _favoriteIds изменился, количество: " +
                    (ids != null ? ids.size() : 0));
            combineFavorites();
        });

        Log.d(TAG, "Источники MediatorLiveData настроены");
    }

    @Override
    protected void onCleared() {
        super.onCleared();
        Log.d(TAG, "FavoritesViewModel уничтожен");
    }

    public void loadData() {
        Log.d(TAG, "Загрузка данных вызвана");
        _isLoading.setValue(true);

        new Thread(() -> {
            try {
                Log.d(TAG, "Загрузка всех продуктов из репозитория");
                List<Product> products = new GetProductList(productRepository).execute();
                Log.d(TAG, "Загружено продуктов всего: " + products.size());
                _allProducts.postValue(products);
            } catch (Exception e) {
                Log.e(TAG, "Ошибка загрузки продуктов: " + e.getMessage(), e);
                _allProducts.postValue(new ArrayList<>());
            }
        }).start();

        Log.d(TAG, "Загрузка ID избранных из SharedPreferences");
        favoritesRepository.getAll(ids -> {
            Log.d(TAG, "Загружено ID избранных: " + ids.size());
            _favoriteIds.postValue(new HashSet<>(ids));
            _isLoading.postValue(false);
        });
    }

    public void toggleFavorite(String productId) {
        Log.d(TAG, "Переключение избранного для продукта: " + productId);
        boolean newFavoriteState = favoritesRepository.toggle(productId);
        Log.d(TAG, "Статус избранного изменен на: " + newFavoriteState);

        favoritesRepository.getAll(ids -> {
            Log.d(TAG, "Обновление ID избранных, новое количество: " + ids.size());
            _favoriteIds.postValue(new HashSet<>(ids));
        });
    }

    private void combineFavorites() {
        List<Product> allProducts = _allProducts.getValue();
        Set<String> favoriteIds = _favoriteIds.getValue();

        Log.d(TAG, "combineFavorites вызван - Все продукты: " +
                (allProducts != null ? allProducts.size() : "null") +
                ", ID избранных: " + (favoriteIds != null ? favoriteIds.size() : "null"));

        if (allProducts == null || favoriteIds == null) {
            Log.d(TAG, "Ожидание обоих источников данных...");
            return;
        }

        List<Product> favorites = new ArrayList<>();
        for (Product product : allProducts) {
            if (favoriteIds.contains(product.getId())) {
                favorites.add(product);
            }
        }

        Log.d(TAG, "MediatorLiveData скомбинировал " + favorites.size() + " избранных продуктов");
        _favoriteProducts.setValue(favorites);
    }

    public String getDebugInfo() {
        int allCount = _allProducts.getValue() != null ? _allProducts.getValue().size() : 0;
        int favCount = _favoriteIds.getValue() != null ? _favoriteIds.getValue().size() : 0;
        int resultCount = _favoriteProducts.getValue() != null ? _favoriteProducts.getValue().size() : 0;

        String debugInfo = "FavoritesViewModel Debug - Все: " + allCount +
                ", ID избранных: " + favCount +
                ", Скомбинировано: " + resultCount +
                ", Загрузка: " + _isLoading.getValue();
        Log.d(TAG, "Отладка: " + debugInfo);
        return debugInfo;
    }
}
```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/favorites/FavoritesVmFactory.java
```java
package ru.mirea.golysheva.skincare.presentation.favorites;

import android.content.Context;

import androidx.annotation.NonNull;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;

import ru.mirea.golysheva.data.repository.FavoritesRepository;
import ru.mirea.golysheva.data.repository.ProductRepositoryImpl;
import ru.mirea.golysheva.data.storage.favorite.AppDatabase;
import ru.mirea.golysheva.data.storage.network.RetrofitNetworkApi;
import ru.mirea.golysheva.domain.repository.ProductRepository;

public class FavoritesVmFactory implements ViewModelProvider.Factory {

    private final Context context;

    public FavoritesVmFactory(Context context) {
        this.context = context;
    }

    @NonNull
    @Override
    @SuppressWarnings("unchecked")
    public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {
        if (modelClass.isAssignableFrom(FavoritesViewModel.class)) {
            ProductRepository productRepo = new ProductRepositoryImpl(
                    AppDatabase.getInstance(context),
                    new RetrofitNetworkApi()
            );
            FavoritesRepository favoritesRepo = new FavoritesRepository(context);
            return (T) new FavoritesViewModel(productRepo, favoritesRepo);
        }
        throw new IllegalArgumentException("Unknown ViewModel class");
    }
}
```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/FavoritesAdapter.java
```java
package ru.mirea.golysheva.skincare.presentation;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.bumptech.glide.Glide;
import com.google.android.material.card.MaterialCardView;

import java.util.ArrayList;
import java.util.List;

import ru.mirea.golysheva.domain.models.Product;
import ru.mirea.golysheva.skincare.R;

public class FavoritesAdapter extends RecyclerView.Adapter<FavoritesAdapter.VH> {

    public interface OnItemClick { void onItem(Product p); }
    public interface OnHeartClick { void onHeart(Product p, int pos); }

    private final List<Product> items = new ArrayList<>();
    private final OnItemClick onItem;
    private final OnHeartClick onHeart;

    public FavoritesAdapter(OnItemClick onItem, OnHeartClick onHeart) {
        this.onItem = onItem;
        this.onHeart = onHeart;
    }

    public void submit(List<Product> data) {
        items.clear();
        if (data != null) items.addAll(data);
        notifyDataSetChanged();
    }

    @NonNull @Override
    public VH onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.item_favorite, parent, false);
        return new VH(v);
    }

    @Override
    public void onBindViewHolder(@NonNull VH h, int pos) {
        Product p = items.get(pos);

        h.tvName.setText(p.getName());
        h.tvPrice.setText(p.getPrice() + " ₽");

        Glide.with(h.itemView.getContext())
                .load(p.getImageUrl())
                .placeholder(R.drawable.ic_placeholder)
                .error(R.drawable.ic_placeholder)
                .into(h.img);

        boolean fav = FavoritesIconState.cacheContains(h.itemView.getContext(), p.getId());

        h.btnFav.setImageResource(fav ? R.drawable.ic_heart_filled : R.drawable.favorite);
        int tint = androidx.core.content.ContextCompat.getColor(
                h.itemView.getContext(), fav ? R.color.heart_red : R.color.sc_text_main);
        androidx.core.widget.ImageViewCompat.setImageTintList(h.btnFav,
                android.content.res.ColorStateList.valueOf(tint));

        h.itemView.setOnClickListener(v -> onItem.onItem(p));
        h.btnFav.setOnClickListener(v -> {
            onHeart.onHeart(p, h.getBindingAdapterPosition());
            boolean nowFav = !fav;
            h.btnFav.setImageResource(nowFav ? R.drawable.ic_heart_filled : R.drawable.favorite);
            int tintNow = androidx.core.content.ContextCompat.getColor(
                    h.itemView.getContext(), nowFav ? R.color.heart_red : R.color.sc_text_main);
            androidx.core.widget.ImageViewCompat.setImageTintList(
                    h.btnFav, android.content.res.ColorStateList.valueOf(tintNow));
        });
    }

    @Override
    public int getItemCount() { return items.size(); }

    static class VH extends RecyclerView.ViewHolder {
        MaterialCardView card;
        ImageView img;
        ImageButton btnFav;
        TextView tvName, tvPrice;
        VH(@NonNull View itemView) {
            super(itemView);
            card = (MaterialCardView) itemView;
            img = itemView.findViewById(R.id.img);
            btnFav = itemView.findViewById(R.id.btnFav);
            tvName = itemView.findViewById(R.id.tvName);
            tvPrice = itemView.findViewById(R.id.tvPrice);
        }
    }
}
```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/FavoritesFragment.java
```java
package ru.mirea.golysheva.skincare.presentation;

import android.os.Bundle;
import android.util.Log;
import android.view.View;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.material.appbar.MaterialToolbar;

import ru.mirea.golysheva.skincare.R;
import ru.mirea.golysheva.skincare.presentation.favorites.FavoritesViewModel;
import ru.mirea.golysheva.skincare.presentation.favorites.FavoritesVmFactory;

public class FavoritesFragment extends Fragment {

    private static final String TAG = "FavoritesFragment";
    private FavoritesViewModel viewModel;
    private FavoritesAdapter adapter;

    public FavoritesFragment() {
        super(R.layout.fragment_favorites);
        Log.d(TAG, "FavoritesFragment создан");
    }

    @Override
    public void onViewCreated(@NonNull View v, @Nullable Bundle b) {
        super.onViewCreated(v, b);
        Log.d(TAG, "onViewCreated вызван");

        MaterialToolbar tb = v.findViewById(R.id.toolbar);
        tb.setNavigationOnClickListener(click -> {
            Log.d(TAG, "Кнопка назад нажата");
            requireActivity().getOnBackPressedDispatcher().onBackPressed();
        });

        RecyclerView rv = v.findViewById(R.id.rv);
        rv.setLayoutManager(new GridLayoutManager(getContext(), 2));

        Log.d(TAG, "Создание FavoritesViewModel");
        viewModel = new ViewModelProvider(this,
                new FavoritesVmFactory(requireContext())).get(FavoritesViewModel.class);

        Log.d(TAG, "Тестирование ViewModel: " + viewModel.getDebugInfo());

        adapter = new FavoritesAdapter(
                p -> {
                    Log.d(TAG, "Избранный продукт нажат: " + p.getName());
                    startActivity(ProductDetailsActivity.intent(requireContext(), p.getId(), p.getImageUrl()));
                },
                (p, pos) -> {
                    Log.d(TAG, "Переключение избранного для: " + p.getName());
                    viewModel.toggleFavorite(p.getId());
                }
        );
        rv.setAdapter(adapter);

        viewModel.favoriteProducts.observe(getViewLifecycleOwner(), favorites -> {
            Log.d(TAG, "MediatorLiveData скомбинировал избранные: " + favorites.size());
            adapter.submit(favorites);
            Log.d(TAG, "UI обновлен с " + favorites.size() + " избранными продуктами");
        });

        viewModel.isLoading.observe(getViewLifecycleOwner(), isLoading -> {
            Log.d(TAG, "Состояние загрузки: " + isLoading);
        });

        Log.d(TAG, "Загрузка данных избранных");
        viewModel.loadData();
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        Log.d(TAG, "onDestroyView вызван");
    }
}
```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/FavoritesIconState.java
```java
package ru.mirea.golysheva.skincare.presentation;

import android.content.Context;

import java.util.HashSet;
import java.util.Set;

import ru.mirea.golysheva.data.repository.FavoritesRepository;

public class FavoritesIconState {
    private static final Set<String> cache = new HashSet<>();
    public static boolean cacheContains(Context c, String id) {
        if (cache.isEmpty()) {
            new FavoritesRepository(c).getAll(ids -> {
                cache.clear(); cache.addAll(ids);
            });
        }
        return cache.contains(id);
    }
    public static void invalidate(Context c) {
        new FavoritesRepository(c).getAll(ids -> { cache.clear(); cache.addAll(ids); });
    }
}
```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/GridSpacingDecoration.java
```java
package ru.mirea.golysheva.skincare.presentation;

import android.graphics.Rect;
import android.view.View;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

public class GridSpacingDecoration extends RecyclerView.ItemDecoration {
    private final int spanCount;
    private final int spacing;
    private final boolean includeEdge;

    public GridSpacingDecoration(int spanCount, int spacing, boolean includeEdge) {
        this.spanCount = spanCount;
        this.spacing = spacing;
        this.includeEdge = includeEdge;
    }

    @Override
    public void getItemOffsets(@NonNull Rect outRect, @NonNull View view,
                               @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
        int position = parent.getChildAdapterPosition(view);
        int column = position % spanCount;

        if (includeEdge) {
            outRect.left  = spacing - column * spacing / spanCount;
            outRect.right = (column + 1) * spacing / spanCount;
            if (position < spanCount) outRect.top = spacing;
            outRect.bottom = spacing;
        } else {
            outRect.left  = column * spacing / spanCount;
            outRect.right = spacing - (column + 1) * spacing / spanCount;
            if (position >= spanCount) outRect.top = spacing;
        }
    }
}

```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/home/HomeViewModel.java
```java
package ru.mirea.golysheva.skincare.presentation.home;

import android.util.Log;

import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.ViewModel;

import java.util.Locale;

import ru.mirea.golysheva.domain.models.Tip;
import ru.mirea.golysheva.domain.usecases.GetWeatherTipUseCase;

public class HomeViewModel extends ViewModel {

    private final GetWeatherTipUseCase getTip;

    public final MutableLiveData<String> title       = new MutableLiveData<>("Погода");
    public final MutableLiveData<String> temperature = new MutableLiveData<>("—");
    public final MutableLiveData<String> uvIndex     = new MutableLiveData<>("—");
    public final MutableLiveData<String> advice      = new MutableLiveData<>("Загружаем...");

    public HomeViewModel(GetWeatherTipUseCase getTip) { this.getTip = getTip; }

    public void load(double lat, double lon) {
        new Thread(() -> {
            try {
                Tip t = getTip.execute(lat, lon);

                title.postValue(t.getTitle() != null ? t.getTitle() : "Погода");

                String tempStr = (t.getTempC() == null)
                        ? "—" : String.format(Locale.getDefault(), "%.0f°C", t.getTempC());
                String uvStr = (t.getUvIndex() == null)
                        ? "—" : String.format(Locale.getDefault(), "%.1f", t.getUvIndex());

                temperature.postValue(tempStr);
                uvIndex.postValue(uvStr);

                if (t.getError() != null) advice.postValue(t.getAdvice());
                else advice.postValue(t.getAdvice());

            } catch (Throwable e) {
                Log.e("HomeVM", "weather error", e);
                title.postValue("Погода");
                temperature.postValue("—");
                uvIndex.postValue("—");
                advice.postValue("Не удалось обновить данные. Проверьте сеть.");
            }
        }).start();
    }
}

```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/home/HomeVmFactory.java
```java
package ru.mirea.golysheva.skincare.presentation.home;

import androidx.annotation.NonNull;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;

import ru.mirea.golysheva.data.repository.OpenMeteoRepository;
import ru.mirea.golysheva.domain.repository.WeatherRepository;
import ru.mirea.golysheva.domain.usecases.GetWeatherTipUseCase;

public class HomeVmFactory implements ViewModelProvider.Factory {
    @NonNull @Override
    @SuppressWarnings("unchecked")
    public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {
        WeatherRepository repo = new OpenMeteoRepository();
        GetWeatherTipUseCase uc = new GetWeatherTipUseCase(repo);
        return (T) new HomeViewModel(uc);
    }
}

```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/HomeFragment.java
```java
package ru.mirea.golysheva.skincare.presentation;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import java.util.Arrays;
import java.util.List;

import ru.mirea.golysheva.skincare.R;
import ru.mirea.golysheva.skincare.presentation.home.HomeViewModel;
import ru.mirea.golysheva.skincare.presentation.home.HomeVmFactory;

public class HomeFragment extends Fragment {

    static class Category {
        final String id, title; final int icon;
        Category(String id, String title, int icon){this.id=id; this.title=title; this.icon=icon;}
    }

    private final List<Category> data = Arrays.asList(
            new Category("clean", "Очищающие\nсредства", R.drawable.ic_drop),
            new Category("moist", "Увлажняющие\nсредства", R.drawable.ic_leaf),
            new Category("spf",   "Солнцезащитные\nсредства", R.drawable.sun),
            new Category("serum", "Сыворотки", R.drawable.ic_flask)
    );

    private HomeViewModel vm;

    @Nullable @Override
    public View onCreateView(@NonNull LayoutInflater inf, @Nullable ViewGroup c, @Nullable Bundle b) {
        return inf.inflate(R.layout.fragment_home, c, false);
    }

    @Override public void onViewCreated(@NonNull View v, @Nullable Bundle b) {
        RecyclerView rv = v.findViewById(R.id.rvCategories);
        rv.setLayoutManager(new GridLayoutManager(getContext(), 2));
        rv.setAdapter(new CategoryAdapter(data, cat -> {
            requireActivity().getSupportFragmentManager()
                    .beginTransaction()
                    .replace(R.id.container, CatalogFragment.newInstance(cat.id))
                    .addToBackStack(null)
                    .commit();
        }));

        v.findViewById(R.id.btnSearch).setOnClickListener(view ->
                startActivity(new android.content.Intent(requireContext(), SearchActivity.class)));

        vm = new ViewModelProvider(this, new HomeVmFactory()).get(HomeViewModel.class);

        TextView tvTitle    = v.findViewById(R.id.tvWeatherTitle);
        TextView tvTemp     = v.findViewById(R.id.tvTempValue);
        TextView tvUv       = v.findViewById(R.id.tvUvValue);
        TextView tvAdvice   = v.findViewById(R.id.tvAdviceText);

        vm.title.observe(getViewLifecycleOwner(), tvTitle::setText);
        vm.temperature.observe(getViewLifecycleOwner(), tvTemp::setText);
        vm.uvIndex.observe(getViewLifecycleOwner(), tvUv::setText);
        vm.advice.observe(getViewLifecycleOwner(), tvAdvice::setText);

        vm.load(55.7558, 37.6173);
    }
}

```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/LoginActivity.java
```java
package ru.mirea.golysheva.skincare.presentation;

import android.content.Intent;
import android.os.Bundle;
import android.text.SpannableString;
import android.text.Spanned;
import android.text.TextUtils;
import android.text.method.LinkMovementMethod;
import android.text.style.ClickableSpan;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.ContextCompat;

import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;

import ru.mirea.golysheva.skincare.R;
import ru.mirea.golysheva.domain.models.User;
import ru.mirea.golysheva.domain.repository.AuthRepository;
import ru.mirea.golysheva.domain.usecases.LoginAsGuest;
import ru.mirea.golysheva.domain.usecases.auth.LoginUser;
import ru.mirea.golysheva.domain.usecases.auth.RegisterUser;
import ru.mirea.golysheva.data.repository.AuthRepositoryImpl;
import ru.mirea.golysheva.data.storage.sharedprefs.ClientPrefs;

public class LoginActivity extends AppCompatActivity {

    private LoginUser loginUC;
    private RegisterUser registerUC;
    private LoginAsGuest guestUC;

    private TextInputLayout tilEmail, tilPassword;
    private TextInputEditText etEmail, etPassword;
    private MaterialButton btnLogin, btnGuest;
    private TextView tvRegister;

    @Override protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);

        // DI
        AuthRepository repo = new AuthRepositoryImpl(new ClientPrefs(this));
        loginUC    = new LoginUser(repo);
        registerUC = new RegisterUser(repo);
        guestUC    = new LoginAsGuest(repo);

        tilEmail    = findViewById(R.id.tilEmail);
        tilPassword = findViewById(R.id.tilPassword);
        etEmail     = findViewById(R.id.etEmail);
        etPassword  = findViewById(R.id.etPassword);
        btnLogin    = findViewById(R.id.btnLogin);
        btnGuest    = findViewById(R.id.btnGuest);
        tvRegister  = findViewById(R.id.tvRegister);

        btnLogin.setOnClickListener(v -> doLogin());
        btnGuest.setOnClickListener(v -> doGuest());

        setupRegisterLink();
    }

    private void setupRegisterLink() {
        String prefix = getString(R.string.register_prompt_prefix);
        String action = getString(R.string.register_prompt_action);

        SpannableString sp = new SpannableString(prefix + action);
        final int linkColor = ContextCompat.getColor(this, R.color.sc_link);

        ClickableSpan cs = new ClickableSpan() {
            @Override public void onClick(@NonNull View widget) {
                doRegister();
            }
            @Override public void updateDrawState(@NonNull android.text.TextPaint ds) {
                super.updateDrawState(ds);
                ds.setColor(linkColor);
                ds.setUnderlineText(true);
            }
        };

        int start = prefix.length();
        int end   = start + action.length();
        sp.setSpan(cs, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);

        tvRegister.setText(sp, TextView.BufferType.SPANNABLE);
        tvRegister.setMovementMethod(LinkMovementMethod.getInstance());
        tvRegister.setHighlightColor(0x00000000);
    }

    private void doLogin() {
        if (!validateInputs()) return;
        setEnabled(false);
        final String email = txt(etEmail);
        final String pass  = txt(etPassword);
        loginUC.execute(email, pass, new AuthRepository.Callback() {
            @Override public void onSuccess(User user) { goHome(); }
            @Override public void onError(Throwable t) { onFail(t); }
        });
    }

    private void doRegister() {
        if (!validateInputs()) return;
        setEnabled(false);
        final String email = txt(etEmail);
        final String pass  = txt(etPassword);
        registerUC.execute(email, pass, new AuthRepository.Callback() {
            @Override public void onSuccess(User user) {
                loginUC.execute(email, pass, new AuthRepository.Callback() {
                    @Override public void onSuccess(User u) { goHome(); }
                    @Override public void onError(Throwable t) { onFail(t); }
                });
            }
            @Override public void onError(Throwable t) { onFail(t); }
        });
    }

    private void doGuest() {
        setEnabled(false);
        guestUC.execute(new AuthRepository.Callback() {
            @Override public void onSuccess(User user) { goHome(); }
            @Override public void onError(Throwable t) { onFail(t); }
        });
    }

    private boolean validateInputs() {
        clearErrors();
        String email = txt(etEmail);
        String pass  = txt(etPassword);

        boolean ok = true;
        if (TextUtils.isEmpty(email)) {
            tilEmail.setError(getString(R.string.hint_email));
            ok = false;
        }
        if (TextUtils.isEmpty(pass)) {
            tilPassword.setError(getString(R.string.hint_password));
            ok = false;
        }
        if (!ok) toast(R.string.enter_email_password);
        return ok;
    }

    private void clearErrors() {
        tilEmail.setError(null);
        tilPassword.setError(null);
    }

    private void goHome() {
        Intent i = new Intent(this, MainActivity.class);
        i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP
                | Intent.FLAG_ACTIVITY_NEW_TASK
                | Intent.FLAG_ACTIVITY_CLEAR_TASK);
        startActivity(i);
        finish();
    }

    private void onFail(Throwable t) {
        setEnabled(true);
        toast(getString(R.string.error_fmt, t.getMessage()));
    }

    private void toast(int resId) { Toast.makeText(this, resId, Toast.LENGTH_SHORT).show(); }
    private void toast(String msg) { Toast.makeText(this, msg, Toast.LENGTH_SHORT).show(); }
    private String txt(TextInputEditText et) {
        return et.getText() == null ? "" : et.getText().toString().trim();
    }
    private void setEnabled(boolean e) {
        btnLogin.setEnabled(e);
        btnGuest.setEnabled(e);
        tvRegister.setEnabled(e);
    }
}

```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/MainActivity.java
```java
package ru.mirea.golysheva.skincare.presentation;

import android.os.Bundle;
import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.Fragment;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import ru.mirea.golysheva.skincare.R;

public class MainActivity extends AppCompatActivity {

    @Override protected void onCreate(Bundle b) {
        super.onCreate(b);
        setContentView(R.layout.activity_main);

        BottomNavigationView bar = findViewById(R.id.bottomBar);
        bar.setOnItemSelectedListener(item -> {
            Fragment f;
            int id = item.getItemId();
            if (id == R.id.nav_home)    f = new HomeFragment();
            else if (id == R.id.nav_catalog) f = new CatalogFragment();
            else if (id == R.id.nav_scan)    f = new ScanFragment();
            else                             f = new FavoritesFragment();
            getSupportFragmentManager().beginTransaction()
                    .replace(R.id.container, f).commit();
            return true;
        });

        if (b == null) {
            bar.setSelectedItemId(R.id.nav_home);
        }
    }
}

```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/ProductAdapter.java
```java
package ru.mirea.golysheva.skincare.presentation;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.bumptech.glide.Glide;

import java.util.ArrayList;
import java.util.List;

import ru.mirea.golysheva.domain.models.Product;
import ru.mirea.golysheva.skincare.R;

public class ProductAdapter extends RecyclerView.Adapter<ProductAdapter.VH> {

    public interface OnItemClick { void onItem(Product p); }

    private final List<Product> items = new ArrayList<>();
    private final OnItemClick onItemClick;

    public ProductAdapter(OnItemClick onItemClick) {
        this.onItemClick = onItemClick;
    }

    public void submit(List<Product> data) {
        items.clear();
        if (data != null) items.addAll(data);
        notifyDataSetChanged();
    }

    @NonNull @Override
    public VH onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.item_product_card, parent, false);
        return new VH(v);
    }

    @Override
    public void onBindViewHolder(@NonNull VH h, int pos) {
        Product p = items.get(pos);
        h.tvName.setText(p.getName());
        h.tvPrice.setText(p.getPrice() + " ₽");

        Glide.with(h.itemView.getContext())
                .load(p.getImageUrl())
                .placeholder(R.drawable.ic_placeholder)
                .error(R.drawable.ic_placeholder)
                .into(h.img);

        h.itemView.setOnClickListener(v -> onItemClick.onItem(p));
    }

    @Override
    public int getItemCount() { return items.size(); }

    static class VH extends RecyclerView.ViewHolder {
        ImageView img;
        TextView tvName, tvPrice;

        VH(@NonNull View itemView) {
            super(itemView);
            img     = itemView.findViewById(R.id.img);
            tvName  = itemView.findViewById(R.id.tvName);
            tvPrice = itemView.findViewById(R.id.tvPrice);
        }
    }
}
```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/ProductDetailsActivity.java
```java
package ru.mirea.golysheva.skincare.presentation;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.MenuItem;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.lifecycle.ViewModelProvider;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.DecodeFormat;
import com.bumptech.glide.request.target.Target;
import com.google.android.material.appbar.MaterialToolbar;

import ru.mirea.golysheva.skincare.R;
import ru.mirea.golysheva.skincare.presentation.details.ProductDetailsViewModel;
import ru.mirea.golysheva.skincare.presentation.details.ProductDetailsVmFactory;

public class ProductDetailsActivity extends AppCompatActivity {

    private static final String EXTRA_ID = "id";
    private static final String EXTRA_IMG_URL = "img_url";

    private ProductDetailsViewModel viewModel;
    private String productId;
    private MenuItem favItem;

    public static Intent intent(Context c, String id, String imgUrl) {
        return new Intent(c, ProductDetailsActivity.class)
                .putExtra(EXTRA_ID, id)
                .putExtra(EXTRA_IMG_URL, imgUrl);
    }

    @Override protected void onCreate(@Nullable Bundle b) {
        super.onCreate(b);
        setContentView(R.layout.activity_product_details);

        MaterialToolbar tb = findViewById(R.id.toolbar);
        setSupportActionBar(tb);
        tb.setNavigationOnClickListener(v -> getOnBackPressedDispatcher().onBackPressed());

        productId = getIntent().getStringExtra(EXTRA_ID);
        String imgUrl = getIntent().getStringExtra(EXTRA_IMG_URL);

        viewModel = new ViewModelProvider(this,
                new ProductDetailsVmFactory(this)).get(ProductDetailsViewModel.class);

        ImageView iv = findViewById(R.id.img);
        Glide.with(this)
                .load(imgUrl)
                .override(Target.SIZE_ORIGINAL)
                .format(DecodeFormat.PREFER_ARGB_8888)
                .placeholder(R.drawable.ic_placeholder)
                .into(iv);

        TextView tvName = findViewById(R.id.name);
        TextView tvPrice = findViewById(R.id.price);
        TextView tvDesc = findViewById(R.id.desc);

        viewModel.product.observe(this, product -> {
            if (product != null) {
                tvName.setText(product.getName());
                tvPrice.setText(product.getPrice() + " ₽");
                tvDesc.setText(product.getDescription());
            }
        });

        viewModel.isFavorite.observe(this, isFavorite -> {
            if (favItem != null) {
                favItem.setIcon(isFavorite ? R.drawable.ic_heart_filled : R.drawable.favorite);
            }
        });

        viewModel.isLoading.observe(this, isLoading -> {
        });

        viewModel.error.observe(this, error -> {
            if (error != null) {
            }
        });

        viewModel.loadProduct(productId);

        setupSection(findViewById(R.id.secIngredients),
                getString(R.string.sec_ingredients),
                getString(R.string.demo_ingredients));
        setupSection(findViewById(R.id.secHowTo),
                getString(R.string.sec_howto),
                getString(R.string.demo_howto));
        setupSection(findViewById(R.id.secForWhom),
                getString(R.string.sec_forwhom),
                getString(R.string.demo_forwhom));
    }

    @Override public boolean onCreateOptionsMenu(android.view.Menu menu) {
        getMenuInflater().inflate(R.menu.menu_product_details, menu);
        favItem = menu.findItem(R.id.action_fav);

        favItem.setOnMenuItemClickListener(item -> {
            viewModel.toggleFavorite(productId);
            return true;
        });

        return true;
    }

    private void setupSection(android.view.View root, String title, String content) {
        TextView t = root.findViewById(R.id.title);
        TextView c = root.findViewById(R.id.content);
        ImageView a = root.findViewById(R.id.arrow);
        t.setText(title);
        c.setText(content);
        root.findViewById(R.id.header).setOnClickListener(v -> {
            boolean show = c.getVisibility() != android.view.View.VISIBLE;
            c.setVisibility(show ? android.view.View.VISIBLE : android.view.View.GONE);
            a.animate().rotationBy(show ? 180f : -180f).setDuration(180).start();
        });
    }
}
```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/ProductImages.java
```java
package ru.mirea.golysheva.skincare.presentation;

import androidx.annotation.DrawableRes;

import ru.mirea.golysheva.skincare.R;

public final class ProductImages {

    @DrawableRes
    public static int of(String name) {
        if (name == null) return R.drawable.ic_placeholder;


        if (name.startsWith("http") || name.startsWith("https")) {
            return R.drawable.ic_placeholder;
        }

        switch (name) {
            case "prod_cleanser": return R.drawable.prod_cleanser;
            case "prod_serum":    return R.drawable.prod_serum;
            case "prod_spf":      return R.drawable.prod_spf;
            case "prod_moist":    return R.drawable.prod_cleanser;
            default:              return R.drawable.ic_placeholder;
        }
    }

    private ProductImages() {}
}
```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/ScanFragment.java
```java
package ru.mirea.golysheva.skincare.presentation;

import android.os.Bundle;
import android.view.*;
import androidx.annotation.*;
import androidx.fragment.app.Fragment;
import ru.mirea.golysheva.skincare.R;

public class ScanFragment extends Fragment {
    @Nullable @Override public View onCreateView(@NonNull LayoutInflater i, @Nullable ViewGroup c, @Nullable Bundle b) {
        return i.inflate(R.layout.fragment_scan, c, false);
    }
    @Override
    public void onViewCreated(@NonNull View v, @Nullable Bundle b) {
        super.onViewCreated(v, b);
        com.google.android.material.appbar.MaterialToolbar tb = v.findViewById(R.id.toolbar);
        tb.setNavigationOnClickListener(
                click -> requireActivity().getOnBackPressedDispatcher().onBackPressed()
        );
        v.findViewById(R.id.btnPick).setOnClickListener(view -> {});
        v.findViewById(R.id.btnCamera).setOnClickListener(view -> {});
    }
}

```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/search/SearchViewModel.java
```java
package ru.mirea.golysheva.skincare.presentation.search;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MediatorLiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.ViewModel;
import android.util.Log;

import java.util.ArrayList;
import java.util.List;

import ru.mirea.golysheva.domain.models.Product;
import ru.mirea.golysheva.domain.repository.ProductRepository;
import ru.mirea.golysheva.domain.usecases.products.GetProductList;

public class SearchViewModel extends ViewModel {

    private static final String TAG = "SearchViewModel";
    private final ProductRepository productRepository;

    private final MutableLiveData<List<Product>> _allProducts = new MutableLiveData<>();
    private final MutableLiveData<String> _searchQuery = new MutableLiveData<>("");

    private final MediatorLiveData<List<Product>> _searchResults = new MediatorLiveData<>();
    public final LiveData<List<Product>> searchResults = _searchResults;

    private final MutableLiveData<Boolean> _isLoading = new MutableLiveData<>(false);
    public final LiveData<Boolean> isLoading = _isLoading;

    public SearchViewModel(ProductRepository productRepository) {
        this.productRepository = productRepository;
        Log.d(TAG, "SearchViewModel создан");

        _searchResults.addSource(_allProducts, products -> {
            Log.d(TAG, "MediatorLiveData: _allProducts изменился, количество: " +
                    (products != null ? products.size() : 0));
            applyFilter();
        });

        _searchResults.addSource(_searchQuery, query -> {
            Log.d(TAG, "MediatorLiveData: _searchQuery изменен на: '" + query + "'");
            applyFilter();
        });

        Log.d(TAG, "Источники MediatorLiveData настроены");
    }

    @Override
    protected void onCleared() {
        super.onCleared();
        Log.d(TAG, "SearchViewModel уничтожен");
    }

    public void loadProducts() {
        Log.d(TAG, "Загрузка продуктов вызвана");
        _isLoading.setValue(true);

        new Thread(() -> {
            try {
                Log.d(TAG, "Загрузка продуктов для поиска");
                List<Product> products = new GetProductList(productRepository).execute();
                Log.d(TAG, "Загружено продуктов для поиска: " + products.size());
                _allProducts.postValue(products);
            } catch (Exception e) {
                Log.e(TAG, "Ошибка загрузки продуктов для поиска: " + e.getMessage(), e);
                _allProducts.postValue(new ArrayList<>());
            } finally {
                _isLoading.postValue(false);
                Log.d(TAG, "Загрузка продуктов для поиска завершена");
            }
        }).start();
    }

    public void setSearchQuery(String query) {
        String cleanQuery = query != null ? query.trim().toLowerCase() : "";
        Log.d(TAG, "Установка поискового запроса: '" + cleanQuery + "'");
        _searchQuery.setValue(cleanQuery);
    }

    private void applyFilter() {
        List<Product> allProducts = _allProducts.getValue();
        String query = _searchQuery.getValue();

        Log.d(TAG, "applyFilter вызван - Все продукты: " +
                (allProducts != null ? allProducts.size() : "null") +
                ", Запрос: '" + query + "'");

        if (allProducts == null) {
            Log.d(TAG, "Продукты еще не доступны");
            _searchResults.setValue(new ArrayList<>());
            return;
        }

        if (query == null || query.isEmpty()) {
            Log.d(TAG, "Показ всех продуктов (нет запроса)");
            _searchResults.setValue(allProducts);
            return;
        }

        List<Product> result = new ArrayList<>();
        for (Product product : allProducts) {
            if (product.getName().toLowerCase().contains(query)) {
                result.add(product);
            }
        }

        Log.d(TAG, "Поиск отфильтрован до " + result.size() + " результатов для запроса: '" + query + "'");
        _searchResults.setValue(result);
    }

    public String getDebugInfo() {
        int allCount = _allProducts.getValue() != null ? _allProducts.getValue().size() : 0;
        int resultCount = _searchResults.getValue() != null ? _searchResults.getValue().size() : 0;
        String query = _searchQuery.getValue();

        String debugInfo = "SearchViewModel Debug - Все: " + allCount +
                ", Результаты: " + resultCount +
                ", Запрос: '" + query + "'" +
                ", Загрузка: " + _isLoading.getValue();
        Log.d(TAG, "Отладка: " + debugInfo);
        return debugInfo;
    }
}
```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/search/SearchVmFactory.java
```java
package ru.mirea.golysheva.skincare.presentation.search;

import android.content.Context;

import androidx.annotation.NonNull;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;

import ru.mirea.golysheva.data.repository.ProductRepositoryImpl;
import ru.mirea.golysheva.data.storage.favorite.AppDatabase;
import ru.mirea.golysheva.data.storage.network.RetrofitNetworkApi;
import ru.mirea.golysheva.domain.repository.ProductRepository;

public class SearchVmFactory implements ViewModelProvider.Factory {

    private final Context context;

    public SearchVmFactory(Context context) {
        this.context = context;
    }

    @NonNull
    @Override
    @SuppressWarnings("unchecked")
    public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {
        if (modelClass.isAssignableFrom(SearchViewModel.class)) {
            ProductRepository productRepo = new ProductRepositoryImpl(
                    AppDatabase.getInstance(context),
                    new RetrofitNetworkApi()
            );
            return (T) new SearchViewModel(productRepo);
        }
        throw new IllegalArgumentException("Unknown ViewModel class");
    }
}
```

### ./app/src/main/java/ru/mirea/golysheva/skincare/presentation/SearchActivity.java
```java
package ru.mirea.golysheva.skincare.presentation;

import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.inputmethod.EditorInfo;
import android.widget.EditText;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import ru.mirea.golysheva.skincare.R;
import ru.mirea.golysheva.skincare.presentation.search.SearchViewModel;
import ru.mirea.golysheva.skincare.presentation.search.SearchVmFactory;

public class SearchActivity extends AppCompatActivity {

    private SearchViewModel viewModel;
    private ProductAdapter adapter;

    @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_search);

        EditText et = findViewById(R.id.etQuery);
        RecyclerView rv = findViewById(R.id.rv);
        rv.setLayoutManager(new GridLayoutManager(this, 2));

        viewModel = new ViewModelProvider(this,
                new SearchVmFactory(this)).get(SearchViewModel.class);

        adapter = new ProductAdapter(p -> {
            startActivity(ProductDetailsActivity.intent(this, p.getId(), p.getImageUrl()));
        });
        rv.setAdapter(adapter);

        viewModel.searchResults.observe(this, products -> {
            adapter.submit(products);
        });

        viewModel.isLoading.observe(this, isLoading -> {
        });

        viewModel.loadProducts();

        et.setImeOptions(EditorInfo.IME_ACTION_SEARCH);
        et.addTextChangedListener(new TextWatcher() {
            @Override public void beforeTextChanged(CharSequence s, int st, int c, int a) {}
            @Override public void onTextChanged(CharSequence s, int st, int b, int c) {
                viewModel.setSearchQuery(s.toString());
            }
            @Override public void afterTextChanged(Editable s) {}
        });
    }
}
```

### ./app/src/main/java/ru/mirea/golysheva/skincare/SkincareApp.java
```java
package ru.mirea.golysheva.skincare;

import android.app.Application;
import ru.mirea.golysheva.data.repository.ProductRepositoryImpl;
import ru.mirea.golysheva.data.storage.favorite.AppDatabase;
import ru.mirea.golysheva.data.storage.network.FakeNetworkApi;
import ru.mirea.golysheva.domain.repository.ProductRepository;

public class SkincareApp extends Application {
    private ProductRepository productRepo;

    @Override public void onCreate() {
        super.onCreate();
        AppDatabase db = AppDatabase.getInstance(this);
        productRepo = new ProductRepositoryImpl(db, new FakeNetworkApi());
    }

    public ProductRepository productRepository() { return productRepo; }
}

```

### ./app/src/test/java/ru/mirea/golysheva/skincare/ExampleUnitTest.java
```java
package ru.mirea.golysheva.skincare;

import org.junit.Test;

import static org.junit.Assert.*;

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
public class ExampleUnitTest {
    @Test
    public void addition_isCorrect() {
        assertEquals(4, 2 + 2);
    }
}
```

### ./data/src/androidTest/java/ru/mirea/golysheva/data/ExampleInstrumentedTest.java
```java
package ru.mirea.golysheva.data;

import android.content.Context;

import androidx.test.platform.app.InstrumentationRegistry;
import androidx.test.ext.junit.runners.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;

/**
 * Instrumented test, which will execute on an Android device.
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
@RunWith(AndroidJUnit4.class)
public class ExampleInstrumentedTest {
    @Test
    public void useAppContext() {
        // Context of the app under test.
        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();
        assertEquals("ru.mirea.golysheva.data.test", appContext.getPackageName());
    }
}
```

### ./data/src/main/java/ru/mirea/golysheva/data/mi/MIRepositoryTFLite.java
```java
package ru.mirea.golysheva.data.mi;

import java.util.Random;
import ru.mirea.golysheva.domain.models.SkinTypeResult;
import ru.mirea.golysheva.domain.repository.MIRepository;

public class MIRepositoryTFLite implements MIRepository {
    private final Random rnd = new Random();

    @Override
    public SkinTypeResult detectSkinType(byte[] imageBytes) {
        String[] types = {"Нормальная","Сухая","Жирная","Комбинированная","Чувствительная"};
        String t = types[rnd.nextInt(types.length)];
        float score = 0.6f + rnd.nextFloat() * 0.4f;
        return new SkinTypeResult(t, score);
    }
}
```

### ./data/src/main/java/ru/mirea/golysheva/data/repository/AuthRepositoryImpl.java
```java
package ru.mirea.golysheva.data.repository;

import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;

import ru.mirea.golysheva.data.storage.sharedprefs.ClientPrefs;
import ru.mirea.golysheva.domain.models.User;
import ru.mirea.golysheva.domain.repository.AuthRepository;

public class AuthRepositoryImpl implements AuthRepository {

    private final ClientPrefs prefs;
    private final FirebaseAuth auth;

    public AuthRepositoryImpl(ClientPrefs prefs) {
        this.prefs = prefs;
        this.auth  = FirebaseAuth.getInstance();
    }

    private static User map(FirebaseUser fu) {
        if (fu == null) return null;

        String email = fu.getEmail();
        if (email == null && fu.isAnonymous()) {
            email = "guest@skincare";
        }

        String displayName = fu.getDisplayName();
        if (displayName == null) {
            displayName = fu.isAnonymous() ? "Guest" : email;
        }

        return new User(email, fu.getUid(), displayName);
    }

    private void saveAndReturn(Task<AuthResult> task, Callback cb) {
        task.addOnSuccessListener(res -> {
            FirebaseUser fu = auth.getCurrentUser();
            User u = map(fu);
            if (u != null) {
                prefs.saveUser(u);
                cb.onSuccess(u);
            } else {
                cb.onError(new IllegalStateException("User is null after Firebase auth"));
            }
        }).addOnFailureListener(cb::onError);
    }

    @Override public void login(String email, String password, Callback cb) {
        saveAndReturn(auth.signInWithEmailAndPassword(email, password), cb);
    }

    @Override public void register(String email, String password, Callback cb) {
        saveAndReturn(auth.createUserWithEmailAndPassword(email, password), cb);
    }

    @Override public void loginAnonymously(Callback cb) {
        saveAndReturn(auth.signInAnonymously(), cb);
    }

    @Override public void logout() {
        auth.signOut();
        prefs.clear();
    }

    @Override public boolean isLoggedIn() {
        return auth.getCurrentUser() != null;
    }

    @Override public User currentUser() {
        return map(auth.getCurrentUser());
    }
}

```

### ./data/src/main/java/ru/mirea/golysheva/data/repository/FavoritesRepository.java
```java
package ru.mirea.golysheva.data.repository;

import android.content.Context;
import android.content.SharedPreferences;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public class FavoritesRepository {

    private static final String PREFS = "fav_prefs";
    private static final String KEY_IDS = "fav_ids";

    private final SharedPreferences sp;

    public interface IdsCallback { void onResult(Set<String> ids); }

    public FavoritesRepository(Context ctx) {
        this.sp = ctx.getSharedPreferences(PREFS, Context.MODE_PRIVATE);
    }

    private Set<String> read() {
        return new HashSet<>(sp.getStringSet(KEY_IDS, Collections.emptySet()));
    }

    private void write(Set<String> ids) {
        sp.edit().putStringSet(KEY_IDS, ids).apply();
    }

    public void getAll(IdsCallback cb) {
        cb.onResult(read());
    }

    public boolean contains(String id) {
        return read().contains(id);
    }

    public boolean toggle(String id) {
        Set<String> ids = read();
        boolean nowFav;
        if (ids.contains(id)) {
            ids.remove(id);
            nowFav = false;
        } else {
            ids.add(id);
            nowFav = true;
        }
        write(ids);
        return nowFav;
    }
}

```

### ./data/src/main/java/ru/mirea/golysheva/data/repository/OpenMeteoRepository.java
```java
package ru.mirea.golysheva.data.repository;

import org.json.JSONObject;

import java.io.IOException;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import ru.mirea.golysheva.domain.models.Tip;
import ru.mirea.golysheva.domain.repository.WeatherRepository;

public class OpenMeteoRepository implements WeatherRepository {

    private final OkHttpClient client = new OkHttpClient();

    @Override
    public Tip getTip(double lat, double lon) {
        String url = "https://api.open-meteo.com/v1/forecast?latitude=" + lat +
                "&longitude=" + lon +
                "&current=temperature_2m,uv_index&timezone=auto";

        Request req = new Request.Builder().url(url).build();

        try (Response resp = client.newCall(req).execute()) {
            if (!resp.isSuccessful() || resp.body() == null) {
                return new Tip("Погода", null, null, null,
                        "Не удалось обновить данные. Код: " + resp.code(), "HTTP");
            }

            String json = resp.body().string();
            JSONObject root = new JSONObject(json);
            String city = root.optString("timezone", "Ваш регион");

            JSONObject current = root.getJSONObject("current");
            Double t  = current.has("temperature_2m") ? current.getDouble("temperature_2m") : null;
            Double uv = current.has("uv_index")       ? current.getDouble("uv_index")       : null;

            String advice = buildAdvice(uv, t);

            return new Tip("Погода (" + city + ")", city, t, uv, advice, null);

        } catch (Exception e) {
            return new Tip("Погода", null, null, null,
                    "Не удалось обновить данные. Проверьте сеть.", e.getMessage());
        }
    }

    private String buildAdvice(Double uv, Double t) {
        String uvAdvice;
        if (uv == null) uvAdvice = "Нет данных по УФ.";
        else if (uv < 3) uvAdvice = "Низкий УФ — базовой защиты обычно достаточно.";
        else if (uv < 6) uvAdvice = "Средний УФ — используйте SPF 30+.";
        else             uvAdvice = "Высокий УФ — SPF 50+, избегайте солнца в полдень.";

        String tempAdvice = "";
        if (t != null) {
            if (t < 0)      tempAdvice = " Холодно — добавьте защитный крем.";
            else if (t < 15)tempAdvice = " Прохладно — пригодится хороший увлажнитель.";
            else if (t > 28)tempAdvice = " Жара — лёгкие текстуры и больше воды.";
        }
        return uvAdvice + tempAdvice;
    }
}

```

### ./data/src/main/java/ru/mirea/golysheva/data/repository/ProductRepositoryImpl.java
```java
package ru.mirea.golysheva.data.repository;

import android.util.Log;

import androidx.annotation.Nullable;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import ru.mirea.golysheva.data.storage.favorite.AppDatabase;
import ru.mirea.golysheva.data.storage.favorite.ProductDao;
import ru.mirea.golysheva.data.storage.models.ProductEntity;
import ru.mirea.golysheva.data.storage.network.NetworkApi;
import ru.mirea.golysheva.domain.models.Product;
import ru.mirea.golysheva.domain.repository.ProductRepository;

public class ProductRepositoryImpl implements ProductRepository {

    private final ProductDao dao;
    private final NetworkApi api;

    public ProductRepositoryImpl(AppDatabase db, NetworkApi api) {
        this.dao = db.productDao();
        this.api = api;
    }

    private static Product toDomain(ProductEntity e) {
        return new Product(e.id, e.name, e.price, e.categoryId, e.imageUrl, e.description);
    }
    private static ProductEntity toEntity(Product p) {
        ProductEntity e = new ProductEntity();
        e.id = p.getId();
        e.name = p.getName();
        e.price = p.getPrice();
        e.categoryId = p.getCategoryId();
        e.imageUrl = p.getImageUrl();
        e.description = p.getDescription();
        return e;
    }

    @Override
    public List<Product> getProductList() {
        return getProductListInternal(null);
    }

    public List<Product> getProductList(String categoryId) {
        return getProductListInternal(categoryId);
    }

    private List<Product> getProductListInternal(@Nullable String categoryIdOrNull) {
        try {
            List<Product> fromApi = api.fetchProducts();
            List<ProductEntity> toSave = new ArrayList<>();
            for (Product p : fromApi) {
                toSave.add(toEntity(p));
            }
            dao.upsertAll(toSave);
            Log.d("ProductRepository", "Successfully fetched from network and saved to DB.");
        } catch (IOException e) {
            Log.e("ProductRepository", "Network error, loading from cache.", e);
        }

        List<ProductEntity> fromDb = (categoryIdOrNull == null)
                ? dao.getAll()
                : dao.getByCategory(categoryIdOrNull);

        List<Product> out = new ArrayList<>();
        for (ProductEntity e : fromDb) out.add(toDomain(e));
        return out;
    }

    @Override
    public Product getProductById(String id) {
        ProductEntity e = dao.getById(id);
        if (e != null) return toDomain(e);

        try {
            Product fromNet = api.fetchById(id);
            if (fromNet != null) {
                dao.upsert(toEntity(fromNet));
                return fromNet;
            }
        } catch (IOException ex) {
            Log.e("ProductRepository", "Network error when fetching by ID.", ex);
        }
        return null;
    }
}
```

### ./data/src/main/java/ru/mirea/golysheva/data/storage/favorite/AppDatabase.java
```java
package ru.mirea.golysheva.data.storage.favorite;

import android.content.Context;
import androidx.room.Database;
import androidx.room.Room;
import androidx.room.RoomDatabase;

import ru.mirea.golysheva.data.storage.models.ProductEntity;

@Database(
        entities = {
                ProductEntity.class,
                ProductFavoriteEntity.class
        },
        version = 6,
        exportSchema = false
)
public abstract class AppDatabase extends RoomDatabase {

    private static volatile AppDatabase INSTANCE;

    public abstract ProductDao productDao();
    public abstract FavoriteDao favDao();

    public static AppDatabase getInstance(Context ctx) {
        if (INSTANCE == null) {
            synchronized (AppDatabase.class) {
                if (INSTANCE == null) {
                    INSTANCE = Room.databaseBuilder(
                                    ctx.getApplicationContext(),
                                    AppDatabase.class,
                                    "skin_care.db"
                            )
                            .fallbackToDestructiveMigration()
                            .build();
                }
            }
        }
        return INSTANCE;
    }
}

```

### ./data/src/main/java/ru/mirea/golysheva/data/storage/favorite/FavoriteDao.java
```java
package ru.mirea.golysheva.data.storage.favorite;

import androidx.room.Dao;
import androidx.room.Insert;
import androidx.room.OnConflictStrategy;
import androidx.room.Query;

import java.util.List;

@Dao
public interface FavoriteDao {

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    void insert(ProductFavoriteEntity e);

    @Query("DELETE FROM favorites WHERE productId = :id")
    void delete(String id);

    @Query("SELECT * FROM favorites")
    List<ProductFavoriteEntity> getAll();
}

```

### ./data/src/main/java/ru/mirea/golysheva/data/storage/favorite/ProductDao.java
```java
package ru.mirea.golysheva.data.storage.favorite;

import androidx.room.Dao;
import androidx.room.Insert;
import androidx.room.OnConflictStrategy;
import androidx.room.Query;

import java.util.List;

import ru.mirea.golysheva.data.storage.models.ProductEntity;

@Dao
public interface ProductDao {

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    void upsertAll(List<ProductEntity> list);

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    void upsert(ProductEntity entity);

    @Query("SELECT * FROM products")
    List<ProductEntity> getAll();

    @Query("SELECT * FROM products WHERE categoryId = :categoryId")
    List<ProductEntity> getByCategory(String categoryId);

    @Query("SELECT * FROM products WHERE id = :id LIMIT 1")
    ProductEntity getById(String id);
}

```

### ./data/src/main/java/ru/mirea/golysheva/data/storage/favorite/ProductFavoriteEntity.java
```java
package ru.mirea.golysheva.data.storage.favorite;

import androidx.annotation.NonNull;
import androidx.room.Entity;
import androidx.room.PrimaryKey;

@Entity(tableName = "favorites")
public class ProductFavoriteEntity {
    @PrimaryKey @NonNull
    public String productId;

    public ProductFavoriteEntity(@NonNull String productId) {
        this.productId = productId;
    }
}

```

### ./data/src/main/java/ru/mirea/golysheva/data/storage/models/ProductEntity.java
```java
package ru.mirea.golysheva.data.storage.models;

import androidx.annotation.NonNull;
import androidx.room.Entity;
import androidx.room.PrimaryKey;

@Entity(tableName = "products")
public class ProductEntity {
    @PrimaryKey @NonNull public String id;
    public String name;
    public int    price;
    public String categoryId;
    public String imageUrl;
    public String description;
}
```

### ./data/src/main/java/ru/mirea/golysheva/data/storage/network/dto/ApiProduct.java
```java
package ru.mirea.golysheva.data.storage.network.dto;

import com.google.gson.annotations.SerializedName;

public class ApiProduct {
    @SerializedName("id")
    private String id;

    @SerializedName("name")
    private String name;

    @SerializedName("price")
    private int price;

    @SerializedName("category")
    private String category;

    @SerializedName("image")
    private String image;

    @SerializedName("description")
    private String description;

    @SerializedName("ingredients")
    private String ingredients;

    @SerializedName("skinType")
    private String skinType;

    // Getters
    public String getId() { return id; }
    public String getName() { return name; }
    public int getPrice() { return price; }
    public String getCategory() { return category; }
    public String getImage() { return image; }
    public String getDescription() { return description; }
    public String getIngredients() { return ingredients; }
    public String getSkinType() { return skinType; }
}

```

### ./data/src/main/java/ru/mirea/golysheva/data/storage/network/dto/ProductResponse.java
```java
package ru.mirea.golysheva.data.storage.network.dto;

import com.google.gson.annotations.SerializedName;
import java.util.List;
import ru.mirea.golysheva.domain.models.Product;

public class ProductResponse {
    @SerializedName("products")
    private List<Product> products;

    public List<Product> getProducts() {
        return products;
    }
}
```

### ./data/src/main/java/ru/mirea/golysheva/data/storage/network/dto/WeatherResponse.java
```java
package ru.mirea.golysheva.data.storage.network.dto;

public class WeatherResponse {
    public Current current;
    public static class Current {
        public String time;
        public Double temperature_2m;
        public Double uv_index;
    }
}
```

### ./data/src/main/java/ru/mirea/golysheva/data/storage/network/FakeNetworkApi.java
```java
package ru.mirea.golysheva.data.storage.network;

import java.util.ArrayList;
import java.util.List;

import ru.mirea.golysheva.domain.models.Product;

public class FakeNetworkApi implements NetworkApi {

    private final List<Product> stub = new ArrayList<>();

    public FakeNetworkApi() {
        stub.add(new Product(
                "1",
                "Hydrating Cleanser",
                499,
                "clean",
                "prod_cleanser",
                "Нежный очищающий гель для ежедневного ухода"
        ));
        stub.add(new Product(
                "2",
                "Vitamin C Serum",
                1299,
                "serum",
                "prod_serum",
                "Сыворотка с витамином C для сияния и выравнивания тона кожи"
        ));
        stub.add(new Product(
                "3",
                "SPF 50",
                899,
                "spf",
                "prod_spf",
                "Лёгкий солнцезащитный крем SPF 50 на каждый день"
        ));
    }

    @Override
    public List<Product> fetchProducts() {
        return new ArrayList<>(stub);
    }

    @Override
    public Product fetchById(String id) {
        for (Product p : stub) {
            if (p.getId().equals(id)) return p;
        }
        return null;
    }
}

```

### ./data/src/main/java/ru/mirea/golysheva/data/storage/network/NetworkApi.java
```java
package ru.mirea.golysheva.data.storage.network;

import java.io.IOException;
import java.util.List;
import ru.mirea.golysheva.domain.models.Product;

public interface NetworkApi {
    List<Product> fetchProducts() throws IOException;
    Product fetchById(String id) throws IOException;
}
```

### ./data/src/main/java/ru/mirea/golysheva/data/storage/network/ProductApiService.java
```java
package ru.mirea.golysheva.data.storage.network;

import java.util.List;

import retrofit2.Call;
import retrofit2.http.GET;
import ru.mirea.golysheva.domain.models.Product;

public interface ProductApiService {
    @GET("v2/ia032k9y")
    Call<List<Product>> getProducts();
}
```

### ./data/src/main/java/ru/mirea/golysheva/data/storage/network/RetrofitClient.java
```java
package ru.mirea.golysheva.data.storage.network;

import retrofit2.Call;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;
import retrofit2.http.GET;
import retrofit2.http.Path;
import ru.mirea.golysheva.data.storage.network.dto.ProductResponse;
import ru.mirea.golysheva.domain.models.Product;

public class RetrofitClient {

    private static final String BASE_URL = "https://api.mocki.io/v2/ia032k9y/";

    private static Retrofit retrofit = null;

    public static ApiService getApiService() {
        if (retrofit == null) {
            retrofit = new Retrofit.Builder()
                    .baseUrl(BASE_URL)
                    .addConverterFactory(GsonConverterFactory.create())
                    .build();
        }
        return retrofit.create(ApiService.class);
    }

    public interface ApiService {
        @GET(".")
        Call<ProductResponse> fetchProducts();

        @GET("{id}")
        Call<Product> fetchById(@Path("id") String id);
    }
}
```

### ./data/src/main/java/ru/mirea/golysheva/data/storage/network/RetrofitNetworkApi.java
```java
package ru.mirea.golysheva.data.storage.network;

import java.io.IOException;
import java.util.List;

import retrofit2.Response;
import ru.mirea.golysheva.data.storage.network.dto.ProductResponse;
import ru.mirea.golysheva.domain.models.Product;

public class RetrofitNetworkApi implements NetworkApi {

    private final RetrofitClient.ApiService apiService;

    public RetrofitNetworkApi() {
        this.apiService = RetrofitClient.getApiService();
    }

    @Override
    public List<Product> fetchProducts() throws IOException {
        Response<ProductResponse> response = apiService.fetchProducts().execute();

        if (response.isSuccessful() && response.body() != null && response.body().getProducts() != null) {
            return response.body().getProducts();
        } else {
            throw new IOException("API call failed with response code: " + response.code());
        }
    }

    @Override
    public Product fetchById(String id) throws IOException {
        List<Product> allProducts = fetchProducts();
        for (Product p : allProducts) {
            if (p.getId().equals(id)) {
                return p;
            }
        }
        return null;
    }
}
```

### ./data/src/main/java/ru/mirea/golysheva/data/storage/sharedprefs/ClientPrefs.java
```java
package ru.mirea.golysheva.data.storage.sharedprefs;

import android.content.Context;
import android.content.SharedPreferences;

import androidx.annotation.Nullable;

import ru.mirea.golysheva.domain.models.User;

public class ClientPrefs {

    private static final String PREFS = "client_prefs";
    private static final String KEY_EMAIL = "email";
    private static final String KEY_TOKEN = "token";
    private static final String KEY_NAME  = "name"; // необязательное поле

    private final SharedPreferences sp;

    public ClientPrefs(Context ctx) {
        this.sp = ctx.getApplicationContext().getSharedPreferences(PREFS, Context.MODE_PRIVATE);
    }

    public void saveUser(User user) {
        sp.edit()
                .putString(KEY_EMAIL, user.getEmail())
                .putString(KEY_TOKEN, user.getToken())
                .putString(KEY_NAME,  user.getName()) // если в User нет name — убери эту строку
                .apply();
    }

    @Nullable
    public User getUser() {
        String email = sp.getString(KEY_EMAIL, null);
        String token = sp.getString(KEY_TOKEN, null);
        if (email == null || token == null) return null;
        String name  = sp.getString(KEY_NAME, null);
        // Конструктор под 3 аргумента. Если у тебя 2 — верни new User(email, token)
        return new User(email, token, name);
    }

    public void clear() {
        sp.edit().clear().apply();
    }
}

```

### ./data/src/test/java/ru/mirea/golysheva/data/ExampleUnitTest.java
```java
package ru.mirea.golysheva.data;

import org.junit.Test;

import static org.junit.Assert.*;

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
public class ExampleUnitTest {
    @Test
    public void addition_isCorrect() {
        assertEquals(4, 2 + 2);
    }
}
```

### ./domain/src/main/java/ru/mirea/golysheva/domain/models/Product.java
```java
package ru.mirea.golysheva.domain.models;

public class Product {
    private final String id;
    private final String name;
    private final int price;
    private final String categoryId;
    private final String imageUrl;
    private final String description;

    public Product(String id, String name, int price,
                   String categoryId, String imageUrl, String description) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.categoryId = categoryId;
        this.imageUrl = imageUrl;
        this.description = description;
    }

    public String getId()            { return id; }
    public String getName()          { return name; }
    public int getPrice()            { return price; }
    public String getCategoryId()    { return categoryId; }
    public String getImageUrl()      { return imageUrl; }
    public String getDescription()   { return description; }
}
```

### ./domain/src/main/java/ru/mirea/golysheva/domain/models/SkinTypeResult.java
```java
package ru.mirea.golysheva.domain.models;

public class SkinTypeResult {
    private final String type;
    private final float score;

    public SkinTypeResult(String type, float score) {
        this.type = type;
        this.score = score;
    }
    public String getType() { return type; }
    public float getScore() { return score; }
}

```

### ./domain/src/main/java/ru/mirea/golysheva/domain/models/Tip.java
```java
package ru.mirea.golysheva.domain.models;

public class Tip {
    private final String title;
    private final String city;
    private final Double tempC;
    private final Double uvIndex;
    private final String advice;
    private final String error;

    public Tip(String title, String city, Double tempC, Double uvIndex, String advice, String error) {
        this.title = title;
        this.city = city;
        this.tempC = tempC;
        this.uvIndex = uvIndex;
        this.advice = advice;
        this.error = error;
    }

    public String getTitle()  { return title; }
    public String getCity()   { return city; }
    public Double getTempC()  { return tempC; }
    public Double getUvIndex(){ return uvIndex; }
    public String getAdvice() { return advice; }
    public String getError()  { return error; }
}

```

### ./domain/src/main/java/ru/mirea/golysheva/domain/models/User.java
```java
package ru.mirea.golysheva.domain.models;

public class User {
    private final String email;
    private final String token;
    private final String name;

    public User(String email, String token, String name) {
        this.email = email;
        this.token = token;
        this.name  = name;
    }

    public String getEmail() { return email; }
    public String getToken() { return token; }
    public String getName()  { return name; }
}

```

### ./domain/src/main/java/ru/mirea/golysheva/domain/repository/AuthRepository.java
```java
package ru.mirea.golysheva.domain.repository;

import ru.mirea.golysheva.domain.models.User;

public interface AuthRepository {

    interface Callback {
        void onSuccess(User user);
        void onError(Throwable t);
    }

    void login(String email, String password, Callback cb);
    void loginAnonymously(Callback cb);
    void register(String email, String password, Callback cb);
    void logout();

    boolean isLoggedIn();
    User currentUser();
}

```

### ./domain/src/main/java/ru/mirea/golysheva/domain/repository/MIRepository.java
```java
package ru.mirea.golysheva.domain.repository;

import ru.mirea.golysheva.domain.models.SkinTypeResult;

public interface MIRepository {
    SkinTypeResult detectSkinType(byte[] imageBytes);
}

```

### ./domain/src/main/java/ru/mirea/golysheva/domain/repository/ProductRepository.java
```java
package ru.mirea.golysheva.domain.repository;

import java.util.List;
import ru.mirea.golysheva.domain.models.Product;

public interface ProductRepository {
    List<Product> getProductList();
    List<Product> getProductList(String categoryId);
    Product getProductById(String id);
}



```

### ./domain/src/main/java/ru/mirea/golysheva/domain/repository/WeatherRepository.java
```java
package ru.mirea.golysheva.domain.repository;

import ru.mirea.golysheva.domain.models.Tip;

public interface WeatherRepository {
    Tip getTip(double lat, double lon);
}

```

### ./domain/src/main/java/ru/mirea/golysheva/domain/usecases/auth/LoginUser.java
```java
package ru.mirea.golysheva.domain.usecases.auth;

import ru.mirea.golysheva.domain.models.User;
import ru.mirea.golysheva.domain.repository.AuthRepository;

public class LoginUser {
    private final AuthRepository repo;
    public LoginUser(AuthRepository repo) { this.repo = repo; }

    // уже есть — асинхронный
    public void execute(String email, String password, AuthRepository.Callback cb) {
        repo.login(email, password, cb);
    }
}

```

### ./domain/src/main/java/ru/mirea/golysheva/domain/usecases/auth/LogoutUser.java
```java
// domain/usecases/LogoutUser.java
package ru.mirea.golysheva.domain.usecases.auth;

import ru.mirea.golysheva.domain.repository.AuthRepository;

public class LogoutUser {
    private final AuthRepository repo;

    public LogoutUser(AuthRepository repo) {
        this.repo = repo;
    }

    public void execute() {
        repo.logout();
    }
}

```

### ./domain/src/main/java/ru/mirea/golysheva/domain/usecases/auth/RegisterUser.java
```java
package ru.mirea.golysheva.domain.usecases.auth;

import ru.mirea.golysheva.domain.repository.AuthRepository;

public class RegisterUser {
    private final AuthRepository repo;
    public RegisterUser(AuthRepository repo) { this.repo = repo; }

    public void execute(String email, String password, AuthRepository.Callback cb) {
        repo.register(email, password, cb);
    }
}
```

### ./domain/src/main/java/ru/mirea/golysheva/domain/usecases/CurrentUser.java
```java
// domain/usecases/CurrentUser.java
package ru.mirea.golysheva.domain.usecases;

import ru.mirea.golysheva.domain.models.User;
import ru.mirea.golysheva.domain.repository.AuthRepository;

public class CurrentUser {
    private final AuthRepository repo;

    public CurrentUser(AuthRepository repo) { this.repo = repo; }

    public User execute() {
        return repo.currentUser();
    }
}

```

### ./domain/src/main/java/ru/mirea/golysheva/domain/usecases/DetectSkinType.java
```java
package ru.mirea.golysheva.domain.usecases;

import ru.mirea.golysheva.domain.models.SkinTypeResult;
import ru.mirea.golysheva.domain.repository.MIRepository;

public class DetectSkinType {
    private final MIRepository repo;
    public DetectSkinType(MIRepository repo) { this.repo = repo; }
    public SkinTypeResult execute(byte[] imageBytes) {
        return repo.detectSkinType(imageBytes);
    }
}
```

### ./domain/src/main/java/ru/mirea/golysheva/domain/usecases/GetWeatherTipUseCase.java
```java
package ru.mirea.golysheva.domain.usecases;

import ru.mirea.golysheva.domain.models.Tip;
import ru.mirea.golysheva.domain.repository.WeatherRepository;

public class GetWeatherTipUseCase {
    private final WeatherRepository repo;

    public GetWeatherTipUseCase(WeatherRepository repo) {
        this.repo = repo;
    }

    public Tip execute(double lat, double lon) {
        return repo.getTip(lat, lon);
    }
}

```

### ./domain/src/main/java/ru/mirea/golysheva/domain/usecases/IsLoggedIn.java
```java
package ru.mirea.golysheva.domain.usecases;

import ru.mirea.golysheva.domain.repository.AuthRepository;

public class IsLoggedIn {
    private final AuthRepository repo;

    public IsLoggedIn(AuthRepository repo) {
        this.repo = repo;
    }

    public boolean execute() {
        return repo.isLoggedIn();
    }
}

```

### ./domain/src/main/java/ru/mirea/golysheva/domain/usecases/LoginAsGuest.java
```java
package ru.mirea.golysheva.domain.usecases;

import ru.mirea.golysheva.domain.repository.AuthRepository;

public class LoginAsGuest {
    private final AuthRepository repo;

    public LoginAsGuest(AuthRepository repo) {
        this.repo = repo;
    }

    public void execute(AuthRepository.Callback cb) {
        repo.loginAnonymously(cb);
    }
}
```

### ./domain/src/main/java/ru/mirea/golysheva/domain/usecases/products/GetProductById.java
```java
package ru.mirea.golysheva.domain.usecases.products;

import ru.mirea.golysheva.domain.models.Product;
import ru.mirea.golysheva.domain.repository.ProductRepository;

public class GetProductById {
    private final ProductRepository repo;
    public GetProductById(ProductRepository repo) { this.repo = repo; }
    public Product execute(String id) { return repo.getProductById(id); }
}
```

### ./domain/src/main/java/ru/mirea/golysheva/domain/usecases/products/GetProductList.java
```java
package ru.mirea.golysheva.domain.usecases.products;

import java.util.List;
import ru.mirea.golysheva.domain.models.Product;
import ru.mirea.golysheva.domain.repository.ProductRepository;

public class GetProductList {
    private final ProductRepository repo;

    public GetProductList(ProductRepository repo) {
        this.repo = repo;
    }

    public List<Product> execute() {
        return repo.getProductList();
    }
}
```

### ./domain/src/main/java/ru/mirea/golysheva/domain/usecases/RegisterUser.java
```java

package ru.mirea.golysheva.domain.usecases;

import ru.mirea.golysheva.domain.repository.AuthRepository;

public class RegisterUser {
    private final AuthRepository repo;

    public RegisterUser(AuthRepository repo) {
        this.repo = repo;
    }

    public void execute(String email, String password, AuthRepository.Callback cb) {
        repo.register(email, password, cb);
    }
}

```

## Конфигурационные файлы

### ./app/src/main/AndroidManifest.xml
```xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <uses-permission android:name="android.permission.INTERNET" />
    <application
        android:name="ru.mirea.golysheva.skincare.SkincareApp"
        android:allowBackup="true"
        android:label="@string/app_name"
        android:icon="@mipmap/ic_launcher"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.SkinCare">

        <activity
            android:name=".presentation.LoginActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <activity
            android:name=".presentation.MainActivity"
            android:exported="false" />
        <activity
            android:name=".presentation.SearchActivity"
            android:exported="false"/>

        <activity
            android:name=".presentation.ProductDetailsActivity"
            android:exported="false"
            android:parentActivityName=".presentation.MainActivity" />
    </application>
</manifest>

```

### ./data/src/main/AndroidManifest.xml
```xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

</manifest>
```

### ./gradle.properties
```xml
# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true
```

### ./settings.gradle.kts
```xml
pluginManagement {
    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = "SkinCare"
include(":app")
include(":domain")
include(":data")

```

